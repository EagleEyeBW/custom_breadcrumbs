<?php
// $Id$
require_once(drupal_get_path('module', 'custom_breadcrumbs') . '/custom_breadcrumbs.admin.inc');

/**
 * Implementation of hook_cb_breadcrumb_info().
 *   @return an array with elements 
 *     'table' indicating the db_table to load the breadcrumb from,
 *     'field' a unique field of the database table used to identify the breadcrumb
 *     'type' a string used for indicating the breadcrumb type on the admin list
 */
function custom_breadcrumbs_views_cb_breadcrumb_info() {
  return array('table' => 'custom_breadcrumbs_views', 'field' => 'views_path', 'type' => 'views');
}

/**
 * Implementation of hook_menu().
 */
function custom_breadcrumbs_views_menu() {
  $items = array();

  $items['admin/build/custom_breadcrumbs/views/add'] = array(
    'title'            => 'Views Pages',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_views_form', 'views'),
    'access callback'  => 'user_access',
    'access arguments' => array('administer custom breadcrumbs'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 5,
  );

  $items['admin/build/custom_breadcrumbs/views/edit'] = array(
    'title'            => 'Edit custom breadcrumb for views',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_views_form', 'views'),
    'access callback'  => 'user_access',
    'access arguments' => array('administer custom breadcrumbs'),
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 * Add breadcrumbs based on paths of views breadcrumbs
 *  @param $callbacks
 *    Associative array of menu router definitions.
 */
function custom_breadcrumbs_views_menu_alter(&$callbacks) {
  // Search through all the custom breadcrumb views paths and menu callback paths for a match
  // if a match exists, check to see if its already set to our new callback function
  // if not, change the callback function to our new one
  // push the original callback function name onto the page arguments array
  // push the breadcrumb id onto the page arguments array
  // these will be popped off for use by _custom_breadcrumb_menu_redirect()

  $pattern = '/%\w+/';  // match any wildcard starting with %
  $candidates = array();
  foreach ($callbacks as $path => $callback) {
    if (isset($callback['page callback']) && $callback['page callback'] == 'views_page') {
      $newpath = preg_replace($pattern, '%', $path);   // replace with a simple %
      $candidates[$path] = $newpath;
    }
  }
  $result = db_query('SELECT bid, views_path FROM {custom_breadcrumbs_views}');
  $list = array();
  while ($breadcrumb = db_fetch_object($result)) {
    $list[] = array( 'bid' => $breadcrumb->bid, 'path' => $breadcrumb->views_path);
  }
  foreach ($list as $item) {
    $fixed = preg_replace($pattern, '%', $item['path']);
    foreach ($candidates as $path => $candidate) {
      if (trim($fixed) == trim($candidate)) {
        if (isset($callbacks[$path])) {
          $oldcb = $callbacks[$path]['page callback'];
          $newcb = '_custom_breadcrumbs_views_menu_redirect';
          if ($oldcb != $newcb) {
            $callbacks[$path]['page callback'] = $newcb;
            array_unshift($callbacks[$path]['page arguments'], $item['path'], $oldcb);
          }
        }
        unset($candidates[$path]);  // no longer a candidate
        break;
      }
    }
  }
}

/*
 *  Private callback function. It sets the custom breadcrumb and
 *  then calls the original page callback function with the original page arguments.
 */

function _custom_breadcrumbs_views_menu_redirect() {
  for ($i = 0; $i < func_num_args(); ++$i) {
    $params[] = func_get_arg($i);
  }
  $views_path = $params[0]; // the first param is the views_path...need this to retrieve breadcrumb
  $original_callback = $params[1]; // the second param is the original callback function
  $callback_params = array_slice($params, 2); // pass the remaining params to the original callback function
  if (function_exists($original_callback)) {
    $output = call_user_func_array($original_callback, $callback_params);
    $breadcrumbs = custom_breadcrumbs_load_breadcrumbs('custom_breadcrumbs_views', array('views_path' => $views_path));
    while ($breadcrumb = array_pop($breadcrumbs)) {
      if (custom_breadcrumbs_is_visible($breadcrumb)) {
        custom_breadcrumbs_set_breadcrumb($breadcrumb);
        return $output;  // don't check any others once a visible breadcrumb is found...
      }
    }
    return $output;
  }
}

// Displays an edit form for a custom breadcrumb record.
function custom_breadcrumbs_views_form(&$form_state, $type) {
  $form = array();
  $breadcrumb = NULL;
  $bid = arg(5);
  if (isset($bid)) {
    drupal_set_title('Edit Custom Breadcrumb for View');
    $breadcrumb = array_pop(custom_breadcrumbs_load_breadcrumbs_bid('custom_breadcrumbs_views', $bid));
  }
  else {
    drupal_set_title('Add Custom Breadcrumb for View');
  }
  $options = array();
  $views =  views_get_all_views();
  foreach ($views as $view) {
    if (!$view->disabled) {
      foreach ($view->display as $display) {
        if ($display->display_plugin == 'page') {
          $name = $display->display_options['path'];
          $options[$name] = $name;
        }
      }
    }
  }
  $form['views_path'] = array(
    '#type' => 'select',
    '#title' => t('Views Path'),
    '#required' => TRUE,
    '#options' => $options,
    '#description' => t('The path to the view that this custom breadcrumb trail will apply to.'),
    '#default_value' => $bid ? $breadcrumb->views_path : NULL,
    '#weight' => -10,
  );
  // store information needed to save this breadcrumb
  $form['#table'] = 'custom_breadcrumbs_views';
  $form['#save_func'] = '_custom_breadcrumbs_views_update';
  $form['#delete_func'] = '_custom_breadcrumbs_views_update';
  $form += custom_breadcrumbs_common_form_elements($bid, $breadcrumb);
  $form['visibility_php']['#description'] = t('Determine whether this breadcrumb should be displayed by using a snippet of PHP to return TRUE or FALSE.');
  $form['#submit'][] = 'custom_breadcrumbs_form_submit';
  $form['#validate'][] = 'custom_breadcrumbs_form_validate';

  return $form;
}

/*
 * Private function called when views breadcrumb is saved or deleted.
 * @param $bid
 *   The unique breadcrumb id.
 */
function _custom_breadcrumbs_views_update($bid) {
  menu_rebuild(); // must rebuild the menu router so we can replace page callback function for views
}
