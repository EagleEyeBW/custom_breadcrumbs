<?php
// $Id$

/**
 * @file
 * Assign custom breadcrumbs based on the Drupal path.
 */

require_once(drupal_get_path('module', 'custom_breadcrumbs') .'/custom_breadcrumbs.admin.inc');

/**
 * Implementation of hook_cb_breadcrumb_info().
 *   @return an array with elements
 *     'table' indicating the db_table to load the breadcrumb from,
 *     'field' a unique field of the database table used to identify the breadcrumb
 *     'type' a string used for indicating the breadcrumb type on the admin list
 */
function custom_breadcrumbs_paths_cb_breadcrumb_info() {
  return array('table' => 'custom_breadcrumbs_paths', 'field' => 'specific_path', 'type' => 'path');
}

/**
 * Implementation of hook_menu().
 */
function custom_breadcrumbs_paths_menu() {
  $items = array();
  $items['admin/build/custom_breadcrumbs/path/add'] = array(
    'title'            => 'Specific Path',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_paths_form', 'path'),
    'access arguments' => array('administer custom breadcrumbs'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 5,
  );
  $items['admin/build/custom_breadcrumbs/path/edit'] = array(
    'title'            => 'Edit custom breadcrumb for path',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_paths_form', 'path'),
    'access arguments' => array('administer custom breadcrumbs'),
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function custom_breadcrumbs_paths_nodeapi($node, $op, $teaser, $page) {
  if ($op == 'alter' && empty($teaser) && !empty($page)) {
    // Check for breadcrumb for this path.
    $matchpath = variable_get('custom_breadcrumbs_paths_allow_wildcards', FALSE);
    $param = ($matchpath) ? array() : array('specific_path' => $_REQUEST['q']);
    $breadcrumbs = custom_breadcrumbs_load_breadcrumbs('custom_breadcrumbs_paths', $param);
    while ($breadcrumb = array_pop($breadcrumbs)) {
      $page_match = FALSE;
      if ($matchpath) {
        $page_match = _custom_breadcrumbs_paths_page_match($REQUEST['q'], $breadcrumb->specific_path);
      }
      if ((!$matchpath) || ($matchpath && $page_match)) {
        if (custom_breadcrumbs_is_visible($breadcrumb, $node)) {
          custom_breadcrumbs_set_breadcrumb($breadcrumb, $node);
          // Don't check any others once a visible breadcrumb is found.
          return;
        }
      }
    }
  }
}

/**
 * Implementation of hook_views_pre_render().
 */
// TODO: create a common helper function for these hooks to avoid code duplication
// TODO: pass $this into custom_breadcrumbs_is_visible to allow use of the views object in
//       determining visibility. Needs some modification of that function to check for the
//       object type.
function custom_breadcrumbs_paths_views_pre_render(&$view) {
  // Don't really do anything with the view. This is just a pretense to insert a breadcrumb.
  $curpath = drupal_get_normal_path($_REQUEST['q']);
  // Check to see if the view path matches the current path.
  $viewpage = FALSE;
  foreach ($view->display as $display) {
    // We're only interested in main page views.
    if (drupal_substr($display->id, 0, 5)  != 'page_' || $display->handler->view->is_attachment) continue;
    $bits = explode('/', $display->display_options['path']);
    $viewargs = $view->args;
    foreach ($bits as $pos => $bit) {
      if ($bit == '%' && !empty($viewargs)) {
        $bits[$pos] = array_shift($viewargs);
      }
    }
    if (!empty($viewargs)) {
      // Add any additional arguments to end of path.
      $bits = array_merge($bits, $viewargs);
    }
    $viewpath = implode('/', $bits);
    $viewpage = $viewpage || _custom_breadcrumbs_paths_page_match($curpath, $viewpath);
  }
  if ($viewpage) {
    // Check for breadcrumb at this path.
    $matchpath = variable_get('custom_breadcrumbs_paths_allow_wildcards', FALSE);
    $param = ($matchpath) ? array() : array('specific_path' => $_REQUEST['q']);
    $breadcrumbs = custom_breadcrumbs_load_breadcrumbs('custom_breadcrumbs_paths', $param);
    while ($breadcrumb = array_pop($breadcrumbs)) {
      $page_match = FALSE;
      if ($matchpath) {
        $page_match = _custom_breadcrumbs_paths_page_match($_REQUEST['q'], $breadcrumb->specific_path);
      }
      if ((!$matchpath) || ($matchpath && $page_match)) {
        if (custom_breadcrumbs_is_visible($breadcrumb, $view)) {
          custom_breadcrumbs_set_breadcrumb($breadcrumb);
          // Don't check any others once a visible breadcrumb is found.
          return;
        }
      }
    }
  }
}

// Displays an edit form for a custom breadcrumb record.
function custom_breadcrumbs_paths_form(&$form_state, $type) {
  $form = array();
  $bid = arg(5);
  if (isset($bid)) {
    drupal_set_title('Edit Custom Breadcrumb for Path');
    $breadcrumb = array_pop(custom_breadcrumbs_load_breadcrumbs_bid('custom_breadcrumbs_paths', $bid));
  }
  else {
    drupal_set_title('Add Custom Breadcrumb for Path');
  }
  $description = t('The drupal path that this custom breadcrumb trail will apply to. ');
  if (variable_get('custom_breadcrumbs_paths_allow_wildcards', FALSE)) {
    $description .= t("The '*' character can be used as a wildcard to set a custom breadcrumb for all matching paths. For example, foo/bar/* could be used to match every page with a path beginning with foo/bar.");
  }
  $form['specific_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Specific Path'),
    '#required' => TRUE,
    '#description' => $description,
    '#default_value' => $bid ?  $breadcrumb->specific_path : NULL,
    '#weight' => -10,
  );
  $form += custom_breadcrumbs_common_form_elements($bid, $breadcrumb);
  // Store the function to call to save this breadcrumb.
  $form['#table'] = 'custom_breadcrumbs_paths';
  $form['#submit'][] = 'custom_breadcrumbs_form_submit';
  $form['#validate'][] = 'custom_breadcrumbs_form_validate';
  return $form;
}

/**
 * Implementation of hook_form_alter().
 *
 * @return NONE
 */
function custom_breadcrumbs_paths_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'custom_breadcrumbs_admin_settings') {
    $form['adv_settings']['custom_breadcrumbs_paths_allow_wildcards'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use wildcard pattern matching in paths'),
      '#default_value' => variable_get('custom_breadcrumbs_paths_allow_wildcards', FALSE),
      '#description' => t("When checked, the '*' character can be used as a wildcard to set a custom breadcrumb for all matching paths. For example, foo/bar/* could be used to match every page with a path beginning with foo/bar."),
      '#weight' => -20,
    );
  }
}

function _custom_breadcrumbs_paths_page_match($curpath, $breadcrumb_path) {
  $path = drupal_get_path_alias($curpath);
  // Compare with the internal and path alias (if any).
  $page_match = drupal_match_path($path, $breadcrumb_path);
  if ($path != $curpath) {
    $page_match = $page_match || drupal_match_path($curpath, $breadcrumb_path);
  }
  return $page_match;
}
